// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: thanos/thanos.proto

package thanos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Checkouter_Checkout_FullMethodName = "/thanos.Checkouter/Checkout"
)

// CheckouterClient is the client API for Checkouter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckouterClient interface {
	Checkout(ctx context.Context, in *CheckoutRequest, opts ...grpc.CallOption) (*CheckoutResponse, error)
}

type checkouterClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckouterClient(cc grpc.ClientConnInterface) CheckouterClient {
	return &checkouterClient{cc}
}

func (c *checkouterClient) Checkout(ctx context.Context, in *CheckoutRequest, opts ...grpc.CallOption) (*CheckoutResponse, error) {
	out := new(CheckoutResponse)
	err := c.cc.Invoke(ctx, Checkouter_Checkout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckouterServer is the server API for Checkouter service.
// All implementations must embed UnimplementedCheckouterServer
// for forward compatibility
type CheckouterServer interface {
	Checkout(context.Context, *CheckoutRequest) (*CheckoutResponse, error)
	mustEmbedUnimplementedCheckouterServer()
}

// UnimplementedCheckouterServer must be embedded to have forward compatible implementations.
type UnimplementedCheckouterServer struct {
}

func (UnimplementedCheckouterServer) Checkout(context.Context, *CheckoutRequest) (*CheckoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkout not implemented")
}
func (UnimplementedCheckouterServer) mustEmbedUnimplementedCheckouterServer() {}

// UnsafeCheckouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckouterServer will
// result in compilation errors.
type UnsafeCheckouterServer interface {
	mustEmbedUnimplementedCheckouterServer()
}

func RegisterCheckouterServer(s grpc.ServiceRegistrar, srv CheckouterServer) {
	s.RegisterService(&Checkouter_ServiceDesc, srv)
}

func _Checkouter_Checkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckouterServer).Checkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Checkouter_Checkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckouterServer).Checkout(ctx, req.(*CheckoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Checkouter_ServiceDesc is the grpc.ServiceDesc for Checkouter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Checkouter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thanos.Checkouter",
	HandlerType: (*CheckouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Checkout",
			Handler:    _Checkouter_Checkout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thanos/thanos.proto",
}
